import React, { useState, useEffect } from 'react';
import { useLocation, useSearchParams } from 'react-router-dom';
import PetOwnerHeader from '../components/PetOwnerHeader';
import './PetCarePage.css';

const PetCarePage = ({ userData: propUserData, userName: propUserName }) => {
  const location = useLocation();
  const [searchParams] = useSearchParams();
  const [currentTime, setCurrentTime] = useState(new Date());
  const [userLocation, setUserLocation] = useState('Ho Chi Minh City, Vietnam');
  const [petName, setPetName] = useState('Th√∫ c∆∞ng');
  const [petData, setPetData] = useState(null);
  const [selectedVideo, setSelectedVideo] = useState(null);
  const [playingAudio, setPlayingAudio] = useState(null);
  const [userData, setUserData] = useState(null);
  const [userName, setUserName] = useState('');

  // Get pet name and data from URL params, location state, or localStorage
  useEffect(() => {
    const urlPetName = searchParams.get('petName');
    if (urlPetName) {
      setPetName(decodeURIComponent(urlPetName));
    } else if (location.state?.petName) {
      setPetName(location.state.petName);
    } else {
      // Try to get from localStorage
      const savedPets = localStorage.getItem('petProfiles');
      if (savedPets) {
        const pets = JSON.parse(savedPets);
        if (pets.length > 0) {
          setPetName(pets[0].name);
          setPetData(pets[0]);
        }
      }
    }
  }, [searchParams, location.state]);

  // Load pet data from localStorage
  useEffect(() => {
    const savedPets = localStorage.getItem('petProfiles');
    if (savedPets) {
      const pets = JSON.parse(savedPets);
      const currentPet = pets.find(pet => pet.name === petName);
      if (currentPet) {
        setPetData(currentPet);
      }
    }
  }, [petName]);

  // Load user data from props or localStorage
  useEffect(() => {
    if (propUserData && propUserName) {
      setUserData(propUserData);
      setUserName(propUserName);
    } else {
      const savedUserData = localStorage.getItem('userRegistrationData');
      if (savedUserData) {
        const user = JSON.parse(savedUserData);
        setUserData(user);
        setUserName(user.name || 'Ng∆∞·ªùi d√πng');
      }
    }
  }, [propUserData, propUserName]);

  // Update time every second
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  // Get user location
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          // In a real app, you would reverse geocode the coordinates
          setUserLocation('Ho Chi Minh City, Vietnam');
        },
        () => {
          setUserLocation('Ho Chi Minh City, Vietnam');
        }
      );
    }
  }, []);

  const formatTime = (date) => {
    return date.toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  const formatDate = (date) => {
    return date.toLocaleDateString('vi-VN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Sample data for videos
  const groomingVideos = [
    {
      id: 1,
      title: 'Ch·∫£i l√¥ng c∆° b·∫£n',
      description: 'H∆∞·ªõng d·∫´n ch·∫£i l√¥ng ƒë√∫ng c√°ch cho ch√≥ v√† m√®o',
      thumbnail: 'https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg',
      videoId: 'dQw4w9WgXcQ'
    },
    {
      id: 2,
      title: 'T·∫Øm r·ª≠a an to√†n',
      description: 'C√°ch t·∫Øm cho th√∫ c∆∞ng m·ªôt c√°ch an to√†n v√† hi·ªáu qu·∫£',
      thumbnail: 'https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg',
      videoId: 'dQw4w9WgXcQ'
    },
    {
      id: 3,
      title: 'C·∫Øt t·ªâa m√≥ng',
      description: 'H∆∞·ªõng d·∫´n c·∫Øt t·ªâa m√≥ng cho th√∫ c∆∞ng',
      thumbnail: 'https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg',
      videoId: 'dQw4w9WgXcQ'
    }
  ];

  // Sample data for health tips with audio
  const healthTips = [
    {
      id: 1,
      title: 'ChƒÉm s√≥c rƒÉng mi·ªáng',
      description: 'ƒê√°nh rƒÉng cho th√∫ c∆∞ng 2-3 l·∫ßn/tu·∫ßn ƒë·ªÉ tr√°nh b·ªánh n∆∞·ªõu rƒÉng',
      audioUrl: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.wav',
      icon: 'ü¶∑'
    },
    {
      id: 2,
      title: 'Qu·∫£n l√Ω c√¢n n·∫∑ng',
      description: 'Theo d√µi c√¢n n·∫∑ng th∆∞·ªùng xuy√™n v√† ƒëi·ªÅu ch·ªânh ch·∫ø ƒë·ªô ƒÉn ph√π h·ª£p',
      audioUrl: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.wav',
      icon: '‚öñÔ∏è'
    },
    {
      id: 3,
      title: 'C√°c t√¨nh tr·∫°ng ph·ªï bi·∫øn',
      description: 'Nh·∫≠n bi·∫øt c√°c d·∫•u hi·ªáu b·ªánh th∆∞·ªùng g·∫∑p ·ªü th√∫ c∆∞ng',
      audioUrl: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.wav',
      icon: 'üè•'
    }
  ];

  // Sample data for training tips
  const trainingTips = [
    {
      id: 1,
      title: 'Hu·∫•n luy·ªán c∆° b·∫£n',
      description: 'D·∫°y th√∫ c∆∞ng c√°c l·ªánh c∆° b·∫£n nh∆∞ ng·ªìi, n·∫±m, ƒë·∫øn',
      audioText: 'B∆∞·ªõc 1: Chu·∫©n b·ªã th·ª©c ƒÉn th∆∞·ªüng. B∆∞·ªõc 2: Ra l·ªánh "ng·ªìi" v√† ƒë·∫©y nh·∫π m√¥ng th√∫ c∆∞ng xu·ªëng. B∆∞·ªõc 3: Th∆∞·ªüng ngay khi th√∫ c∆∞ng ng·ªìi ƒë√∫ng t∆∞ th·∫ø.',
      icon: 'üéØ'
    },
    {
      id: 2,
      title: 'Hu·∫•n luy·ªán h√†nh vi',
      description: 'ƒêi·ªÅu ch·ªânh c√°c h√†nh vi kh√¥ng mong mu·ªën',
      audioText: 'Khi th√∫ c∆∞ng c√≥ h√†nh vi x·∫•u, h√£y n√≥i "kh√¥ng" m·ªôt c√°ch d·ª©t kho√°t v√† h∆∞·ªõng d·∫´n h√†nh vi ƒë√∫ng. Lu√¥n th∆∞·ªüng khi th√∫ c∆∞ng l√†m ƒë√∫ng.',
      icon: 'üö´'
    },
    {
      id: 3,
      title: 'Hu·∫•n luy·ªán n√¢ng cao',
      description: 'C√°c k·ªπ nƒÉng ƒë·∫∑c bi·ªát v√† tr√≤ ch∆°i th√¥ng minh',
      audioText: 'D·∫°y th√∫ c∆∞ng c√°c tr√≤ ch∆°i tr√≠ tu·ªá nh∆∞ t√¨m ƒë·ªì v·∫≠t, v∆∞·ª£t ch∆∞·ªõng ng·∫°i v·∫≠t. ƒêi·ªÅu n√†y gi√∫p th√∫ c∆∞ng ph√°t tri·ªÉn tr√≠ n√£o v√† gi·∫£m stress.',
      icon: 'üß†'
    }
  ];

  // Handle video selection
  const handleVideoSelect = (video) => {
    setSelectedVideo(video);
  };

  // Handle audio play
  const handleAudioPlay = (tipId) => {
    if (playingAudio === tipId) {
      setPlayingAudio(null);
    } else {
      setPlayingAudio(tipId);
      // In a real app, you would play the actual audio here
      setTimeout(() => setPlayingAudio(null), 3000); // Simulate audio duration
    }
  };

  // Handle text-to-speech for training tips
  const handleTextToSpeech = (text) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'vi-VN';
      speechSynthesis.speak(utterance);
    }
  };

  return (
    <div className="pet-care-page">
      <PetOwnerHeader userName={userName} userData={userData} />
      
      {/* Header */}
      <div className="pet-care-header">
        <div className="container">
          <div className="header-content">
            <div className="pet-info">
              <h1>üêæ {petName}</h1>
              <div className="location-time">
                <span className="location">üìç {userLocation}</span>
                <span className="time">{formatTime(currentTime)}</span>
                <span className="date">{formatDate(currentTime)}</span>
              </div>
            </div>
            <button 
              className="back-btn"
              onClick={() => window.history.back()}
            >
              ‚Üê Quay l·∫°i
            </button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="pet-care-content">
        {/* Pet Profile Section */}
        <section className="care-section-full">
          <div className="container">
            <div className="section-header">
              <div className="section-icon">üìã</div>
              <h2>H·ªì s∆° th√∫ c∆∞ng</h2>
              <p>Th√¥ng tin chi ti·∫øt v·ªÅ th√∫ c∆∞ng c·ªßa b·∫°n</p>
            </div>
            <div className="section-content">
              <div className="profile-grid">
                <div className="profile-card">
                  <h3>Th√¥ng tin c∆° b·∫£n</h3>
                  <div className="info-list">
                    <div className="info-item">
                      <span className="label">Lo√†i:</span>
                      <span className="value">{petData?.species || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                    </div>
                    <div className="info-item">
                      <span className="label">Gi·ªëng:</span>
                      <span className="value">{petData?.breed || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                    </div>
                    <div className="info-item">
                      <span className="label">ƒê·ªô tu·ªïi:</span>
                      <span className="value">{petData?.age || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                    </div>
                    <div className="info-item">
                      <span className="label">Gi·ªõi t√≠nh:</span>
                      <span className="value">{petData?.gender || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                    </div>
                  </div>
                </div>
                <div className="profile-card">
                  <h3>Th√¥ng tin s·ª©c kh·ªèe</h3>
                  <div className="info-list">
                    <div className="info-item">
                      <span className="label">C√¢n n·∫∑ng:</span>
                      <span className="value">{petData?.weight ? `${petData.weight} kg` : 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                    </div>
                    <div className="info-item">
                      <span className="label">Ti√™m ch·ªßng:</span>
                      <span className="value">{petData?.vaccinations || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                    </div>
                    <div className="info-item">
                      <span className="label">D·ªã ·ª©ng:</span>
                      <span className="value">{petData?.allergies || 'Kh√¥ng c√≥'}</span>
                    </div>
                    <div className="info-item">
                      <span className="label">Thu·ªëc ƒëang d√πng:</span>
                      <span className="value">{petData?.medications || 'Kh√¥ng c√≥'}</span>
                    </div>
                  </div>
                </div>
              </div>
              <div className="section-actions">
                <button className="action-btn" onClick={() => window.location.href = '/pet-profile'}>
                  Xem chi ti·∫øt h·ªì s∆°
                </button>
              </div>
            </div>
          </div>
        </section>

        {/* Feeding Guide Section */}
        <section className="care-section-full feeding-section">
          <div className="container">
            <div className="section-header">
              <div className="section-icon">üçΩÔ∏è</div>
              <h2>H∆∞·ªõng d·∫´n cho ƒÉn</h2>
              <p>Bi·ªÉu ƒë·ªì khuy·∫øn ngh·ªã s·ªë b·ªØa ƒÉn theo ƒë·ªô tu·ªïi v√† lo√†i</p>
            </div>
            <div className="section-content">
              <div className="feeding-charts-grid">
                <div className="chart-card">
                  <div className="chart-header">
                    <h3>üêï Ch√≥ con (0-12 th√°ng)</h3>
                    <span className="chart-value">4-5 b·ªØa/ng√†y</span>
                  </div>
                  <div className="chart">
                    <div className="chart-bar" style={{width: '80%'}}>
                      <span>80%</span>
                    </div>
                  </div>
                  <p className="chart-description">Ch√≥ con c·∫ßn ƒÉn nhi·ªÅu b·ªØa nh·ªè ƒë·ªÉ ph√°t tri·ªÉn t·ªët</p>
                </div>
                <div className="chart-card">
                  <div className="chart-header">
                    <h3>üêï Ch√≥ tr∆∞·ªüng th√†nh (1-7 tu·ªïi)</h3>
                    <span className="chart-value">2-3 b·ªØa/ng√†y</span>
                  </div>
                  <div className="chart">
                    <div className="chart-bar" style={{width: '60%'}}>
                      <span>60%</span>
                    </div>
                  </div>
                  <p className="chart-description">Ch√≥ tr∆∞·ªüng th√†nh c·∫ßn ch·∫ø ƒë·ªô ƒÉn c√¢n b·∫±ng</p>
                </div>
                <div className="chart-card">
                  <div className="chart-header">
                    <h3>üê± M√®o</h3>
                    <span className="chart-value">3-4 b·ªØa/ng√†y</span>
                  </div>
                  <div className="chart">
                    <div className="chart-bar" style={{width: '70%'}}>
                      <span>70%</span>
                    </div>
                  </div>
                  <p className="chart-description">M√®o th√≠ch ƒÉn nhi·ªÅu b·ªØa nh·ªè trong ng√†y</p>
                </div>
              </div>
              <div className="section-actions">
                <button className="action-btn">Xem bi·ªÉu ƒë·ªì chi ti·∫øt</button>
              </div>
            </div>
          </div>
        </section>

        {/* Grooming Videos Section */}
        <section className="care-section-full grooming-section">
          <div className="container">
            <div className="section-header">
              <div className="section-icon">üõÅ</div>
              <h2>Video ch·∫£i chu·ªët</h2>
              <p>H∆∞·ªõng d·∫´n chƒÉm s√≥c v√† l√†m ƒë·∫πp cho th√∫ c∆∞ng</p>
            </div>
            <div className="section-content">
              <div className="videos-grid">
                {groomingVideos.map((video) => (
                  <div key={video.id} className="video-card" onClick={() => handleVideoSelect(video)}>
                    <div className="video-thumbnail">
                      <img src={video.thumbnail} alt={video.title} />
                      <div className="play-overlay">
                        <div className="play-icon">‚ñ∂Ô∏è</div>
                      </div>
                    </div>
                    <div className="video-content">
                      <h3>{video.title}</h3>
                      <p>{video.description}</p>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* Video Modal */}
              {selectedVideo && (
                <div className="video-modal" onClick={() => setSelectedVideo(null)}>
                  <div className="video-modal-content" onClick={(e) => e.stopPropagation()}>
                    <button className="close-video" onClick={() => setSelectedVideo(null)}>√ó</button>
                    <div className="video-container">
                      <iframe
                        width="100%"
                        height="315"
                        src={`https://www.youtube.com/embed/${selectedVideo.videoId}`}
                        title={selectedVideo.title}
                        frameBorder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowFullScreen
                      ></iframe>
                    </div>
                    <h3>{selectedVideo.title}</h3>
                    <p>{selectedVideo.description}</p>
                  </div>
                </div>
              )}
              
              <div className="section-actions">
                <button className="action-btn">Xem t·∫•t c·∫£ video</button>
              </div>
            </div>
          </div>
        </section>

        {/* Health Tips Section */}
        <section className="care-section-full health-section">
          <div className="container">
            <div className="section-header">
              <div className="section-icon">üíä</div>
              <h2>M·∫πo s·ª©c kh·ªèe</h2>
              <p>ChƒÉm s√≥c s·ª©c kh·ªèe to√†n di·ªán cho th√∫ c∆∞ng</p>
            </div>
            <div className="section-content">
              <div className="health-tips-grid">
                {healthTips.map((tip) => (
                  <div key={tip.id} className="health-tip-card">
                    <div className="tip-header">
                      <div className="tip-icon">{tip.icon}</div>
                      <h3>{tip.title}</h3>
                    </div>
                    <div className="tip-content">
                      <p>{tip.description}</p>
                      <button 
                        className={`audio-btn ${playingAudio === tip.id ? 'playing' : ''}`}
                        onClick={() => handleAudioPlay(tip.id)}
                      >
                        {playingAudio === tip.id ? 'üîä ƒêang ph√°t...' : 'üîä Nghe m·∫πo'}
                      </button>
                    </div>
                  </div>
                ))}
              </div>
              <div className="section-actions">
                <button className="action-btn">Xem t·∫•t c·∫£ m·∫πo s·ª©c kh·ªèe</button>
              </div>
            </div>
          </div>
        </section>

        {/* Training Tips Section */}
        <section className="care-section-full training-section">
          <div className="container">
            <div className="section-header">
              <div className="section-icon">üéæ</div>
              <h2>M·∫πo ƒë√†o t·∫°o</h2>
              <p>H∆∞·ªõng d·∫´n hu·∫•n luy·ªán v√† ph√°t tri·ªÉn k·ªπ nƒÉng cho th√∫ c∆∞ng</p>
            </div>
            <div className="section-content">
              <div className="training-tips-grid">
                {trainingTips.map((tip) => (
                  <div key={tip.id} className="training-tip-card">
                    <div className="training-header">
                      <div className="training-icon">{tip.icon}</div>
                      <div>
                        <h3>{tip.title}</h3>
                        <p>{tip.description}</p>
                      </div>
                    </div>
                    <div className="training-content">
                      <div className="audio-text">
                        <h4>H∆∞·ªõng d·∫´n chi ti·∫øt:</h4>
                        <p>{tip.audioText}</p>
                      </div>
                      <div className="training-actions">
                        <button 
                          className="audio-btn"
                          onClick={() => handleTextToSpeech(tip.audioText)}
                        >
                          üîä Nghe h∆∞·ªõng d·∫´n
                        </button>
                        <button 
                          className="text-btn"
                          onClick={() => navigator.clipboard.writeText(tip.audioText)}
                        >
                          üìã Sao ch√©p vƒÉn b·∫£n
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="section-actions">
                <button className="action-btn">Xem t·∫•t c·∫£ m·∫πo ƒë√†o t·∫°o</button>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
};

export default PetCarePage;
